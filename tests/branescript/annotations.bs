// Testing annotations (Brane v2.0.0 onwards)

// Annotations are given before any statement to annotate them with additional information
// Probably the most-often used one is the replacement of the on-statement:
#[on = "test"]
println("Wow, no longer any braces if I don't want to :)");


// However, since a block is a statement, the following also works
#[on = "test"]
{
    println("I run on \"test\"!");
    println("Me too!");
}


// However, other types of annotations are also available. For example:
#[allow(dead_code)]
{
    return;
    println("This will no longer cause a warning!");
}


// You can also stack them either by using commas in a single annotation notation (`#[]`), or use multiple:
#[on = "test", allow(dead_code)]
{
    return;
    println("If this would be printed, it would be printed on \"test\"");
}

// or
#[on = "test"]
#[allow(dead_code)]
{
    return;
    println("If this would be printed, it would be printed on \"test\"");
}


// Finally, you can also attach annotations from _within_ a block to everything in that block:
{
    #![allow(dead_code)]
    return;
    println("Does still not error!");
}

// This is especially useful if you want to annotate an entire program:

#![allow(dead_code)]
// Gotcha, this program would never throw dead_code warnings anyways due to this statement :)
// (But comment it out to test the other statements)
