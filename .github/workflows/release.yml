name: Release

# The workflow will be triggered on any tag starting with a 'v' (any, with our scheme)
on:
  create:
    tags:
      - 'v*'

# Define the jobs
jobs:
  # Build the CLI for linux
  build-cli-linux-x86_64:
    runs-on: ubuntu-latest
    steps:
    # Download the repo
    - name: Checkout repository
      uses: actions/checkout@v4

    # Install Rust
    - name: Install Rust (via rustup)
      run: |
        curl https://sh.rustup.rs -sSf | sh -s -- -y --default-host x86_64-unknown-linux-gnu --default-toolchain stable --profile default

    # Install dependencies
    - name: Install dependencies (CMake & musl)
      run: |
        sudo apt update
        sudo apt-get install -y cmake musl-tools
        sudo ln -s /bin/g++ /usr/local/bin/musl-g++

    # Compile the CLI binary
    - name: Build (optimized) CLI binary
      run: |
        source $HOME/.cargo/env
        ./make.sh cli
        mv ./target/release/brane ./target/release/brane-linux-x86_64

    # Finally, upload the binaries
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: linux-x86_64
        path: |
          target/release/brane-linux-x86_64

  # Build the CLI for macOS
  build-cli-macos-x86_64:
    runs-on: macos-latest
    steps:
    # Download the repo
    - name: Checkout repository
      uses: actions/checkout@v4

    # Install Rust
    - name: Install Rust (via rustup)
      run: |
        curl https://sh.rustup.rs -sSf | sh -s -- -y --default-host x86_64-darwin-macos --default-toolchain stable --profile default

    # Install homebrew
    - name: Install homebrew
      run: |
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

    # Install dependencies
    - name: Install dependencies (CMake, OpenSSL & musl)
      run: |
        brew install pkg-config openssl cmake SergioBenitez/osxct/x86_64-unknown-linux-gnu
        sudo ln -s /usr/local/opt/musl-cross/bin/x86_64-linux-musl-gcc /usr/local/bin/musl-gcc
        sudo ln -s /usr/local/opt/musl-cross/bin/x86_64-linux-musl-g++ /usr/local/bin/musl-g++

    # Compile the CLI binary
    - name: Build (optimized) CLI binary
      run: |
        source $HOME/.cargo/env
        ./make.sh cli
        mv ./target/release/brane ./target/release/brane-darwin-x86_64

    # Finally, upload the binaries
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: darwin-x86_64
        path: |
          target/release/brane-darwin-x86_64

  # # Building the macOS x86_64 binary
  # build-darwin-amd64:
  #   runs-on: macos-latest
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4

  #   - name: Install Rust
  #     uses: actions-rs/toolchain@v1
  #     with:
  #       toolchain: stable
  #       target: x86_64-unknown-linux-musl
  #       override: true

  #   - name: Build (optimized) CLI binary
  #     uses: actions-rs/cargo@v1
  #     with:
  #       use-cross: true
  #       command: build
  #       args: --target x86_64-unknown-linux-musl --release --package brane-cli

  #   - name: Rename CLI binary
  #     with:
  #       run: mkdir -p ./target/release && mv target/x86_64-unknown-linux-musl/release/brane target/release/brane-darwin-amd64

  #   - name: Upload artifact
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: brane-darwin-amd64
  #       path: target/release/brane-darwin-amd64

  # # Building the macOS aarch64 binary
  # build-darwin-arm64:
  #   runs-on: macos-latest
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4

  #   - name: Install Rust
  #     uses: actions-rs/toolchain@v1
  #     with:
  #       toolchain: stable
  #       target: aarch64-unknown-linux-musl
  #       override: true

  #   - name: Build (optimized) CLI binary
  #     uses: actions-rs/cargo@v1
  #     with:
  #       use-cross: true
  #       command: build
  #       args: --target aarch64-unknown-linux-musl --release --package brane-cli

  #   - name: Rename CLI binary
  #     with:
  #       run: mkdir -p ./target/release && mv target/aarch64-unknown-linux-musl/release/brane target/release/brane-darwin-arm64

  #   - name: Upload artifact
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: brane-darwin-arm64
  #       path: target/release/brane-darwin-arm64
  
  # build-services:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Get Github tag
  #       id: meta
  #       run: |
  #         echo "::set-output name=tag::${GITHUB_REF#'refs/tags/v'}"

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v1

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1
   
  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v1
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Build and push 'brane-api'
  #       uses: docker/build-push-action@v2
  #       with:
  #         file: Dockerfile.api
  #         push: true
  #         tags: ghcr.io/onnovalkering/brane/brane-api:${{ steps.meta.outputs.tag }}

  #     - name: Build and push 'brane-clb'
  #       uses: docker/build-push-action@v2
  #       with:
  #         file: Dockerfile.clb
  #         push: true
  #         tags: ghcr.io/onnovalkering/brane/brane-clb:${{ steps.meta.outputs.tag }}

  #     - name: Build and push 'brane-drv'
  #       uses: docker/build-push-action@v2
  #       with:
  #         file: Dockerfile.drv
  #         push: true
  #         tags: ghcr.io/onnovalkering/brane/brane-drv:${{ steps.meta.outputs.tag }}

  #     - name: Build and push 'brane-job'
  #       uses: docker/build-push-action@v2
  #       with:
  #         file: Dockerfile.job
  #         push: true
  #         tags: ghcr.io/onnovalkering/brane/brane-job:${{ steps.meta.outputs.tag }}

  #     - name: Build and push 'brane-log'
  #       uses: docker/build-push-action@v2
  #       with:
  #         file: Dockerfile.log
  #         push: true
  #         tags: ghcr.io/onnovalkering/brane/brane-log:${{ steps.meta.outputs.tag }}

  #     - name: Build and push 'brane-plr'
  #       uses: docker/build-push-action@v2
  #       with:
  #         file: Dockerfile.plr
  #         push: true
  #         tags: ghcr.io/onnovalkering/brane/brane-plr:${{ steps.meta.outputs.tag }}                                             

  # create-release:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - build-darwin-binaries
  #     - build-linux-binaries
  #     - build-services
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
        
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         path: artifacts

  #     - name: Create release
  #       uses: anton-yurchenko/git-release@v3
  #       env:
  #         ALLOW_TAG_PREFIX: "true"
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         args: |
  #           artifacts/darwin/brane-darwin
  #           artifacts/linux/release/brane-linux
  #           artifacts/linux/x86_64-unknown-linux-musl/release/branelet

