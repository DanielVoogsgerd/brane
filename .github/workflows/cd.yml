name: Continuous deployment
on:
  pull_request: 
  push:

jobs:
  # build-images:
  #   # Note that we don't depend on check in stable or nightly
  #   # as code need not compile for the formatter to work
  #   name: "Build brane instance images"
  #
  #   runs-on: ubuntu-latest
  #
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #
  #     # TODO: Build entire instance
  #     - name: Build image
  #       run: python ./make.py api-image
  #
  #     - name: Compress images
  #       run: gzip -9 target/release/brane-api.tar
  #
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: brane-images
  #         path: target/release/brane-api.tar.gz
  #         if-no-files-found: error
  #         retention-days: 1

  # build-ctl:
  #   name: "Build branectl"
  #
  #
  #   strategy:
  #     os:
  #       - ubuntu-latest
  #       - macos-latest
  #     arch:
  #       - x86_64
  #       - aarch64
  #
  #   runs-on: ubuntu-latest
  #
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #     - name: Install rust toolchain
  #       uses: dtolnay/rust-toolchain@master
  #       with:
  #         toolchain: stable
  #
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #
  #     - name: Build branectl
  #       run: python ./make.py ctl
  #
  #     - name: Rename
  #       run: mv target/release/branectl target/release/branectl-linux-x86_64
  #
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: branectl-linux-x86_64
  #         path: target/release/branectl-linux-x86_64
  #         if-no-files-found: error
  #         retention-days: 1

  build-cli-native:
    name: "Build brane(-cli) (native platforms)"

    strategy:
      # TODO: Enable
      fail-fast: false
      matrix:
        # Compile brane for Windows, macOS, and Linux (ideally all x86/64 and ARM (64-bit), although Windows & Linux ARM are optional)
        include:
          # - runner: windows-latest
          #   os: windows
          #   arch: x86_64
          # - runner: ubuntu-latest
          #   os: linux
          #   arch: x86_64
          # - runner: macos-13
          #   os: macos
          #   arch: x86_64
          # - runner: macos-latest
          #   os: macos
          #   arch: aarch64

          # Emulated targets
          - runner: ubuntu-latest
            os: macos
            arch: aarch64
            emulated: true
            target: aarch64-unknown-linux-musl

    runs-on: ${{matrix.runner}}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: ${{matrix.target}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        if: matrix.emulated == true

      # - name: Install deps (musl)
      #   run: sudo apt update && sudo apt install -y musl-dev
      #   if: matrix.runner == 'ubuntu-latest' && matrix.arch == 'aarch64'

      - name: Build brane (native)
        run: cargo build --release --package brane-cli
        if: matrix.emulated == false

      - name: Build brane (emulated)
        run: python ./make.py --con --arch ${{matrix.arch}} cli
        if: matrix.emulated == true

      - name: Rename
        run: mv "target/release/brane" "target/release/brane-${{matrix.os}}-${{matrix.arch}}"

      - uses: actions/upload-artifact@v4
        with:
          name: brane-${{matrix.os}}-${{matrix.arch}}
          path: target/release/brane-*-*
          if-no-files-found: error
          retention-days: 1
