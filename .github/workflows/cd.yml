name: Continuous deployment
on:
  pull_request: 
  push:

jobs:
  # build-images:
  #   # Note that we don't depend on check in stable or nightly
  #   # as code need not compile for the formatter to work
  #   name: "Build brane instance images"
  #
  #   runs-on: ubuntu-latest
  #
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #     - name: Install rust toolchain
  #       uses: dtolnay/rust-toolchain@master
  #       with:
  #         toolchain: stable
  #
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #
  #     # TODO: Build entire instance
  #     - name: Build image
  #       run: python ./make.py api-image
  #
  #     - name: Compress images
  #       run: gzip -9 target/release/brane-api.tar
  #
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: brane-images
  #         path: target/release/brane-api.tar.gz
  #         if-no-files-found: error
  #         retention-days: 1

  build-ctl:
    name: "Build branectl"

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build branectl
        run: python ./make.py ctl

      - name: Rename
        run: mv target/release/branectl target/release/branectl-linux-x86_64

      - uses: actions/upload-artifact@v4
        with:
          name: branectl-linux-x86_64
          path: target/release/branectl-linux-x86_64
          if-no-files-found: error
          retention-days: 1

  build-cli:
    name: "Build brane(-cli)"

    strategy:
      fail-fast: true
      matrix:
        # Compile brane for Windows, macOS, and Linux (ideally all x86/64 and ARM (64-bit), although Windows & Linux ARM are optional)
        os:
          - windows-latest
          - ubuntu-latest
          - macos-latest
        arch:
          - x86_64
          - aarch64

    runs-on: ubuntu-latest

    env:
      # Horrible hack to map the runs_on variable to the more generic platform
      TARGET_OS: >
        ${{ fromJson('{
          "windows-latest": "windows",
          "ubuntu-latest": "linux",
          "macos-latest": "macos"
        }')[matrix.os] }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build brane
        run: python ./make.py cli

      - name: Rename
        run: mv "target/release/brane" "target/release/brane-$TARGET_OS-${arch}"

      - uses: actions/upload-artifact@v4
        with:
          name: brane-linux-x86_64
          path: target/release/brane-linux-x86_64
          if-no-files-found: error
          retention-days: 1
