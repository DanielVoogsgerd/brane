name: Continuous deployment
on:
  pull_request: 
  push:

jobs:
  build-instance-images:
    # Note that we don't depend on check in stable or nightly
    # as code need not compile for the formatter to work
    name: "Build central instance images"

    runs-on: ubuntu-latest

    strategy:
      matrix:
        # Note that we don't adapt the runner right now
        arch: [ x86_64 ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # TODO: Build entire instance
      - name: Build image
        run: python ./make.py instance
      #
      # - name: Compress images
      #   run: |
      #     find target/release -name 'brane-*.tar' -exec gzip -9 '{}' \;

      - uses: actions/upload-artifact@v4
        with:
          name: central-instance-${{matrix.arch}}
          path: |
            target/release/brane-*.tar
          if-no-files-found: error
          retention-days: 1

  build-worker-instance-images:
    # Note that we don't depend on check in stable or nightly
    # as code need not compile for the formatter to work
    name: "Build worker instance images"

    runs-on: ubuntu-latest

    strategy:
      matrix:
        # Note that we don't adapt the runner right now
        arch: [ x86_64 ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # TODO: Build entire instance
      - name: Build image
        run: python ./make.py worker-instance
      #
      # - name: Compress images
      #   run: |
      #     find target/release -name 'brane-*.tar' -exec gzip -9 '{}' \;

      - uses: actions/upload-artifact@v4
        with:
          name: worker-instance-${{matrix.arch}}
          path: |
            target/release/brane-*.tar
          if-no-files-found: error
          retention-days: 1

  build-platforms:
    name: "Build for different platforms"

    strategy:
      # TODO: Enable
      fail-fast: false
      matrix:
        # Compile the various parts of Brane, can be set via the following options:
        # cli, ctl, cc, let
        include:
          - runner: windows-latest
            os: windows
            arch: x86_64
            cli: true
            cc: true

          - runner: ubuntu-latest
            os: linux
            arch: x86_64
            cli: true
            ctl: true
            cc: true
            let: true

          - runner: macos-13
            os: macos
            arch: x86_64
            cli: true
            ctl: true
            cc: true

          - runner: macos-latest
            os: macos
            arch: aarch64
            cli: true
            ctl: true
            cc: true

          # Emulated targets
          # - runner: ubuntu-latest
          #   os: macos
          #   arch: aarch64
          #   emulated: true
          #   target: aarch64-unknown-linux-musl
          #   cli: true
          #   ctl: true
          #   cc: true
          #   let: true

    runs-on: ${{matrix.runner}}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: ${{matrix.target}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        if: matrix.emulated == true

      - uses: actions/setup-go@v5
        with:
          go-version: '^1.22.0' # The Go version to download (if necessary) and use.
        if: matrix.ctl == true

      # TODO: Create tar.gz from the dynlib
      - name: Build brane (native)
        run: |
          cargo build --release --package brane-cli --package brane-cli-c
        if: matrix.emulated == false && matrix.cli == true

      - name: Build brane (emulated)
        run: |
          python ./make.py --con --arch ${{matrix.arch}} cli libbrane_cli
        if: matrix.emulated == true && matrix.cli == true

      - name: Build branectl (native)
        run: |
          cargo build --release --package brane-ctl
        if: matrix.emulated == false && matrix.ctl == true

      - name: Build branectl (emulated)
        run: |
          python ./make.py --con --arch ${{matrix.arch}} ctl
        if: matrix.emulated == true && matrix.ctl == true

      - name: Build brane-cc (native)
        run: |
          cargo build --release --package brane-cc
        if: matrix.emulated == false && matrix.cc == true

      - name: Build brane-cc (emulated)
        run: |
          python ./make.py --con --arch ${{matrix.arch}} cc
        if: matrix.emulated == true && matrix.cc == true

      - name: Build branelet (native)
        run: |
          cargo build --release --package brane-let
        if: matrix.emulated == false && matrix.let == true

      - name: Build branelet (emulated)
        run: |
          python ./make.py --con --arch ${{matrix.arch}} branelet
        if: matrix.emulated == true && matrix.let == true

      - uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{matrix.os}}-${{matrix.arch}}
          path: |
            ./target/release/brane*
            ./target/release/libbrane*
          if-no-files-found: error
          retention-days: 1

  collect_results:
    name: Collect all results

    needs:
      - build-worker-instance-images
      - build-instance-images
      - build-platforms

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create source dir
        run: mkdir sources

      - name: Download central images
        uses: actions/download-artifact@v4
        with:
          name: central-instance-x86_64
          path: sources/instance-x86_64

      - name: Download worker images
        uses: actions/download-artifact@v4
        with:
          name: worker-instance-x86_64
          path: sources/worker-instance-x86_64

      # And now the OS-related binaries
      - name: Download macOS (x86) artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts-macos-x86_64
          path: sources/darwin-x86_64-artifacts

      - name: Download macOS (aarch64) artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts-macos-aarch64
          path: sources/darwin-aarch64-artifacts

      - name: Download Windows (x86) artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts-windows-x86_64
          path: sources/windows-x86_64-artifacts

      - name: Download Linux (x86) artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts-linux-x86_64
          path: sources/linux-x86_64-artifacts

      - name: List collected files
        run: |
          find sources

      - name: Rename collected files
        run: |
          cd sources && python ../ci-cd/rename-artifacts.py

      - uses: actions/upload-artifact@v4
        with:
          name: result
          path: |
            sources/result
          if-no-files-found: error
          retention-days: 1
